use std::panic::panic_any;
use crate::consensus::aggsig::DST_MOTION;
use crate::{bcat, consensus};

use crate::consensus::consensus_kv::{kv_get, kv_put, kv_exists, kv_set_bit, kv_increment};

pub const EPOCH_EMISSION_BASE: i128 = 1_000_000_000_000_000;
pub const EPOCH_INTERVAL: i128 = 100_000;

pub fn epoch_emission(epoch: u64) -> i128 {
    epoch_emission_1(epoch, EPOCH_EMISSION_BASE)
}

fn epoch_emission_1(epoch: u64, acc: i128) -> i128 {
    if epoch == 0 {
        acc
    } else {
        let sub = acc.saturating_mul(333) / 1_000_000;
        let emitted = acc.saturating_sub(sub);
        epoch_emission_1(epoch - 1, emitted)
    }
}

pub fn circulating_without_burn(epoch: u64) -> i128 {
    fn rec(n: u64, acc: i128) -> i128 {
        if n == 0 { acc } else { rec(n - 1, acc + epoch_emission(n)) }
    }
    rec(epoch, 0)
}

const PEDDLEBIKE67_B58: &[&str] = &[
    "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",
];

pub const PEDDLEBIKE67: &[[u8; 48]; 67] = &[
    [0x95, 0xD8, 0x37, 0xFF, 0x1D, 0x08, 0xEF, 0xFB, 0x8B, 0x70, 0x1E, 0x1D, 0xC7, 0x39, 0x5A, 0x43, 0xC6, 0xDC, 0x65, 0x12, 0xE4, 0x64, 0x64, 0xF1, 0x2B, 0xD5, 0xDD, 0xE6, 0xFD, 0x3A, 0xE7, 0x01, 0x66, 0xA6, 0x36, 0x42, 0xF5, 0x94, 0x8C, 0x2C, 0x4E, 0x38, 0x54, 0x0C, 0xDE, 0xCD, 0x39, 0xD2],
    [0x95, 0xD6, 0x8B, 0xD8, 0x44, 0x2D, 0xAA, 0x15, 0xF6, 0x96, 0x24, 0x5D, 0x22, 0xFD, 0x16, 0x5C, 0x70, 0xBA, 0x03, 0x76, 0xA8, 0xEC, 0xBE, 0x28, 0xD5, 0xD6, 0x30, 0xF7, 0x8F, 0x94, 0xDD, 0x9E, 0x81, 0xB1, 0x69, 0xA2, 0x4A, 0xC7, 0x64, 0x24, 0x58, 0x0E, 0x58, 0x77, 0xF3, 0xC3, 0x0B, 0xB0],
    [0x95, 0xD6, 0x95, 0x90, 0x56, 0xCC, 0x5C, 0x67, 0x7B, 0xE0, 0x50, 0x78, 0xA9, 0x15, 0x3D, 0x46, 0x49, 0x88, 0x60, 0x1A, 0x0D, 0x06, 0x59, 0x90, 0x2A, 0xA9, 0xC8, 0x51, 0x4E, 0x1F, 0x75, 0x02, 0xFE, 0x37, 0x83, 0x7A, 0xFF, 0x11, 0x54, 0x63, 0xE4, 0x0F, 0x40, 0xE0, 0xD4, 0x4A, 0x16, 0xC4],
    [0x95, 0xD6, 0xA5, 0xAF, 0xDD, 0xE5, 0x3E, 0x9C, 0xF2, 0x18, 0xB2, 0x60, 0x33, 0xB3, 0x61, 0xEC, 0x5F, 0x82, 0x2D, 0x3C, 0x06, 0x41, 0x0E, 0xB1, 0x34, 0xDA, 0x57, 0xBC, 0x53, 0x11, 0x58, 0x93, 0x5B, 0x45, 0xD3, 0xAD, 0x2D, 0xE6, 0xAD, 0x50, 0x3B, 0xD7, 0xF4, 0x57, 0xEC, 0x4A, 0x51, 0x2F],
    [0x95, 0xD6, 0xAB, 0x96, 0x2C, 0x7D, 0xB2, 0x01, 0xED, 0x17, 0x8E, 0x97, 0x6C, 0xCB, 0x0A, 0xD7, 0x2C, 0x88, 0x72, 0x84, 0xE8, 0xD0, 0xA4, 0x47, 0x92, 0xF3, 0x4F, 0xD4, 0x2E, 0x8D, 0xE3, 0xCF, 0x93, 0x75, 0x4D, 0x83, 0x4D, 0x18, 0x0A, 0x30, 0x4E, 0x09, 0xAB, 0x6C, 0x04, 0x37, 0x45, 0xE1],
    [0x95, 0xD6, 0xB5, 0x21, 0x25, 0xED, 0xD6, 0x18, 0x82, 0xB4, 0x44, 0xD3, 0x2F, 0xD4, 0x7E, 0x96, 0x0F, 0x61, 0x63, 0x05, 0x07, 0x4E, 0xC3, 0x40, 0x19, 0x11, 0x0E, 0x56, 0xD2, 0xC7, 0x70, 0x7A, 0x59, 0x2A, 0x20, 0x50, 0xDE, 0xC9, 0xD7, 0xBC, 0xDF, 0xA5, 0xBB, 0x3C, 0x13, 0x16, 0x18, 0xA3],
    [0x95, 0xD6, 0xBC, 0x60, 0xF1, 0x03, 0xC5, 0x5A, 0x81, 0xBB, 0x6B, 0x2A, 0x40, 0xAF, 0xD1, 0x03, 0xA5, 0xDB, 0x49, 0xDB, 0x68, 0xC4, 0xAD, 0xB5, 0x1F, 0x69, 0xCC, 0x1C, 0xA2, 0x15, 0x93, 0x9E, 0x3F, 0xC4, 0x37, 0xC2, 0xEE, 0x31, 0xF3, 0x51, 0xBD, 0x20, 0xDB, 0xD0, 0x5D, 0xA4, 0xB7, 0x26],
    [0x95, 0xD6, 0xCA, 0x83, 0x2C, 0xAC, 0x1C, 0x82, 0xAC, 0x4B, 0xA8, 0xA1, 0x4B, 0x60, 0xAD, 0xB9, 0xFB, 0x15, 0x29, 0xBD, 0xE5, 0x00, 0xFD, 0xE0, 0xE5, 0xDE, 0x14, 0x88, 0xE1, 0x66, 0x86, 0x52, 0x96, 0xDF, 0x9B, 0xEB, 0x84, 0x57, 0x29, 0x11, 0x4E, 0x4B, 0xE2, 0x78, 0x19, 0xAA, 0x48, 0xE2],
    [0x95, 0xD6, 0xD1, 0x72, 0xEC, 0x97, 0xA6, 0x70, 0x33, 0x83, 0x29, 0x6D, 0x44, 0x4E, 0x7E, 0x7F, 0xAB, 0xB0, 0x59, 0xB6, 0xA8, 0xEB, 0xA1, 0xB0, 0x52, 0xA7, 0x13, 0xE4, 0x75, 0x70, 0x6E, 0xF9, 0x83, 0x8A, 0xF2, 0xE3, 0x61, 0x59, 0x02, 0xE6, 0xC9, 0x55, 0xE3, 0xD9, 0x23, 0xF0, 0x13, 0xAE],
    [0x95, 0xD6, 0xDC, 0xA4, 0xE7, 0xE9, 0xBD, 0xEA, 0xA8, 0xAD, 0x0D, 0xCD, 0xCE, 0x86, 0x67, 0xB8, 0x19, 0xDC, 0x2E, 0x69, 0x37, 0x4F, 0x3C, 0x7D, 0xC4, 0xF2, 0x96, 0xF4, 0x55, 0xE7, 0x50, 0xF5, 0xB3, 0xB2, 0x95, 0x66, 0xCB, 0x61, 0xEF, 0xED, 0x70, 0x50, 0xA5, 0xDD, 0x80, 0x88, 0xD5, 0x5A],
    [0x95, 0x78, 0xC6, 0xCC, 0x1A, 0x7E, 0xBB, 0xBB, 0x64, 0xEC, 0x65, 0xC5, 0x4B, 0x25, 0x43, 0x50, 0x74, 0x10, 0x0E, 0xD1, 0x5A, 0x5B, 0xD6, 0xA1, 0x74, 0xBE, 0x4B, 0x61, 0x4B, 0xA0, 0xD5, 0xEB, 0x5E, 0x2A, 0xE6, 0x82, 0xC7, 0x58, 0xA2, 0xB1, 0x04, 0x68, 0xE9, 0x83, 0x63, 0xCC, 0xDE, 0xB4],
    [0x95, 0x77, 0x23, 0x8C, 0x01, 0xC9, 0x30, 0xFE, 0x41, 0x7C, 0x48, 0xFC, 0x1F, 0xF8, 0xB7, 0x01, 0x18, 0x71, 0x45, 0xD6, 0x30, 0x5C, 0x04, 0x42, 0xD9, 0xF3, 0xC3, 0xAC, 0x31, 0x15, 0x30, 0xEF, 0x6A, 0x51, 0xE9, 0x85, 0xFD, 0xAF, 0x6F, 0x80, 0xAB, 0x95, 0x72, 0x6E, 0x8E, 0xE2, 0xAD, 0x7F],
    [0x95, 0x77, 0x28, 0xB6, 0xB0, 0xBD, 0xC2, 0x6D, 0xC9, 0x81, 0x41, 0x66, 0x4C, 0x77, 0xF3, 0xDD, 0x3F, 0x31, 0xEE, 0x85, 0x85, 0xDF, 0x38, 0x63, 0x4D, 0xFA, 0x8A, 0x52, 0xC3, 0xED, 0x9F, 0xAC, 0xE8, 0x32, 0xBA, 0x65, 0x16, 0x64, 0xA4, 0xA8, 0x47, 0xB9, 0x66, 0xA3, 0x61, 0xFB, 0x58, 0x35],
    [0x95, 0x77, 0x30, 0x96, 0x49, 0x20, 0xA0, 0x0D, 0xE3, 0xA8, 0xFA, 0x02, 0xEA, 0x89, 0x65, 0x09, 0x3D, 0xE3, 0x0B, 0x8E, 0xD4, 0x23, 0x65, 0x5B, 0xCB, 0x98, 0x29, 0x25, 0xAB, 0x95, 0x79, 0x7B, 0xBB, 0x5A, 0x55, 0x4E, 0xCB, 0x50, 0xD1, 0xB6, 0xCE, 0x25, 0x77, 0x6C, 0xAF, 0x5D, 0x74, 0x8C],
    [0x95, 0x77, 0x3C, 0x10, 0x56, 0x5C, 0x56, 0xD2, 0x27, 0x09, 0x85, 0x97, 0x97, 0x9B, 0x75, 0x1A, 0x3E, 0xD5, 0xF9, 0x9C, 0x28, 0xFA, 0xBC, 0x12, 0xF0, 0x76, 0xED, 0xC6, 0x7A, 0x7B, 0x19, 0xD6, 0x67, 0x59, 0x67, 0x99, 0xC7, 0x67, 0xDE, 0x05, 0x31, 0x12, 0x0A, 0x81, 0x97, 0xC3, 0xF1, 0x4E],
    [0x95, 0x77, 0x4A, 0x57, 0x62, 0xD2, 0x60, 0x73, 0x0E, 0x16, 0x4E, 0x8E, 0x0B, 0x22, 0xD5, 0x83, 0x5D, 0xD7, 0x8D, 0xE8, 0xD7, 0xC6, 0x39, 0x4B, 0xA1, 0x47, 0x3D, 0x8D, 0xAF, 0x4A, 0x3C, 0x20, 0xB7, 0x3A, 0xB9, 0x07, 0x28, 0x00, 0x87, 0xE3, 0xE6, 0xB6, 0x2C, 0x7C, 0x35, 0xE9, 0x35, 0xCD],
    [0x95, 0x77, 0x53, 0x14, 0x4F, 0x94, 0xF0, 0x6E, 0x3B, 0x47, 0x81, 0xD3, 0x37, 0xB7, 0xF7, 0xB2, 0xB7, 0x92, 0x6B, 0xF7, 0xB4, 0x9E, 0xC7, 0xDF, 0x22, 0x14, 0xF8, 0x59, 0xAC, 0x23, 0xF2, 0x79, 0xB3, 0xEC, 0x47, 0xA4, 0xD9, 0x3D, 0x45, 0x74, 0x12, 0xEE, 0x17, 0x59, 0xE6, 0xF9, 0x0A, 0x5C],
    [0x95, 0x77, 0x5B, 0x46, 0x7A, 0xCB, 0x18, 0x7D, 0x32, 0x81, 0x96, 0x1A, 0x67, 0x8B, 0x34, 0x7A, 0xCE, 0xD9, 0x97, 0x7D, 0xB4, 0x9A, 0xB8, 0xA1, 0xAB, 0x12, 0xE7, 0x6A, 0xE2, 0x72, 0xA7, 0x32, 0xFB, 0x0D, 0xB8, 0xDE, 0x2D, 0x9D, 0x31, 0x2A, 0xF4, 0x48, 0x7B, 0xAF, 0x9C, 0xCB, 0xAE, 0x91],
    [0x95, 0x77, 0x5F, 0x9D, 0xAD, 0x81, 0x45, 0x9A, 0x72, 0x95, 0xF1, 0x58, 0x08, 0xE5, 0x13, 0x09, 0x59, 0x4C, 0xF3, 0x16, 0xDC, 0xF9, 0x0B, 0x4D, 0x92, 0x0B, 0xBF, 0x39, 0x25, 0xF8, 0x74, 0x47, 0x27, 0xBA, 0xC5, 0x5C, 0xDB, 0xF9, 0x96, 0x24, 0xDD, 0x32, 0x61, 0xE1, 0xEE, 0xF6, 0x03, 0xA9],
    [0x95, 0x77, 0x6B, 0x3E, 0x7F, 0x1B, 0x4A, 0x0D, 0x46, 0x4E, 0x8D, 0x09, 0x06, 0x6E, 0x9D, 0xAA, 0xF6, 0x8C, 0x8C, 0x1B, 0xAF, 0xD0, 0x8E, 0xF2, 0xB7, 0xD6, 0xF4, 0xBC, 0xA0, 0x4D, 0xB1, 0x3D, 0x68, 0x0A, 0x4B, 0xAE, 0x95, 0xC9, 0xA0, 0x94, 0xD2, 0x6E, 0x44, 0x0A, 0x8F, 0xDB, 0x69, 0x6B],
    [0x95, 0x7A, 0xDC, 0xA8, 0x5B, 0x47, 0x06, 0x63, 0x7D, 0x2F, 0x80, 0x04, 0x54, 0x97, 0x82, 0xC0, 0x70, 0x4B, 0x7F, 0x7D, 0x87, 0x8D, 0x0D, 0x61, 0xC7, 0xBA, 0xD5, 0x79, 0x67, 0x57, 0x81, 0xD0, 0x57, 0x93, 0xA8, 0xD6, 0x27, 0x17, 0x01, 0xC7, 0xAE, 0xDD, 0x7C, 0xB3, 0x71, 0xA7, 0x6A, 0x4C],
    [0x95, 0x79, 0x36, 0x85, 0x52, 0x08, 0x74, 0x33, 0xC9, 0xDF, 0xF4, 0xEA, 0x44, 0x52, 0x2D, 0xC3, 0x80, 0xD1, 0x63, 0xF0, 0x7F, 0x17, 0xE3, 0x1A, 0x74, 0x93, 0x39, 0xF1, 0x78, 0xB2, 0xB7, 0x54, 0xD9, 0xF0, 0x55, 0x41, 0xD0, 0x60, 0x4F, 0xD3, 0xC7, 0x56, 0xE9, 0x1D, 0xB1, 0xCA, 0x44, 0xD0],
    [0x95, 0x79, 0x3F, 0xED, 0xDA, 0x1A, 0x40, 0xCC, 0xC5, 0x16, 0xA7, 0xED, 0x3F, 0x05, 0x11, 0x8A, 0x9F, 0x94, 0x3B, 0x1E, 0x0F, 0xCC, 0xFE, 0x7D, 0x2B, 0x51, 0xA2, 0x70, 0x37, 0xE6, 0x8A, 0x57, 0xE0, 0xC2, 0x3E, 0xC6, 0x31, 0x6F, 0xBB, 0xA0, 0x9E, 0xB4, 0x0A, 0x68, 0xEC, 0xBF, 0x1C, 0x39],
    [0x95, 0x79, 0x45, 0xE9, 0x73, 0x74, 0xE2, 0x4B, 0xB5, 0x2E, 0xD3, 0xF6, 0xB7, 0x16, 0x94, 0x5B, 0x85, 0x91, 0x49, 0x6B, 0xEC, 0x39, 0x2F, 0x0F, 0xE7, 0x27, 0xED, 0xE3, 0x88, 0x0A, 0xB1, 0x19, 0xB1, 0x11, 0x92, 0x3D, 0xC4, 0x09, 0x69, 0x2C, 0x9F, 0x0F, 0x4D, 0xED, 0xD6, 0xA0, 0x30, 0x33],
    [0x95, 0x79, 0x51, 0xA5, 0x24, 0xC0, 0x87, 0x9F, 0x9B, 0xAA, 0x49, 0xC5, 0xCA, 0x48, 0x78, 0x06, 0xAD, 0x3E, 0x49, 0xC4, 0xFB, 0x7B, 0x9B, 0x41, 0xDB, 0xC4, 0x51, 0x4A, 0x0B, 0x1B, 0x12, 0x3F, 0x32, 0x94, 0x9C, 0xE5, 0x77, 0x39, 0xD0, 0x1B, 0xEC, 0x94, 0xC2, 0x7F, 0xBB, 0xC6, 0x5B, 0x1C],
    [0x95, 0x79, 0x5B, 0x63, 0x5D, 0xA0, 0x66, 0xB1, 0x03, 0x4E, 0x12, 0xA6, 0xF7, 0x33, 0xFF, 0xEC, 0x5C, 0x23, 0x61, 0x6F, 0x47, 0x81, 0xF9, 0xF1, 0x8D, 0x43, 0x43, 0x72, 0x08, 0x8B, 0xDC, 0x1B, 0x24, 0x1E, 0x73, 0xA8, 0xD7, 0x78, 0x96, 0xA1, 0xE0, 0x2A, 0x4B, 0x84, 0xF1, 0xAF, 0x6A, 0x34],
    [0x95, 0x79, 0x60, 0xC1, 0xE1, 0x8D, 0x2A, 0x24, 0xDD, 0xAD, 0x36, 0x2D, 0xFF, 0x7A, 0x13, 0x13, 0x86, 0x24, 0x32, 0x54, 0xEF, 0x0C, 0x80, 0x89, 0xFE, 0x3A, 0x00, 0x6C, 0xF7, 0x82, 0x0B, 0xFE, 0x02, 0xE3, 0xA1, 0x94, 0x7E, 0x25, 0xEE, 0xAF, 0xB9, 0xAD, 0x3E, 0xFD, 0x1A, 0xD6, 0xC4, 0xD2],
    [0x95, 0x79, 0x6F, 0xAB, 0x71, 0xC1, 0x05, 0x8F, 0x49, 0x76, 0x90, 0xA1, 0x68, 0x3E, 0x4D, 0x7F, 0x04, 0x79, 0x73, 0x40, 0x1D, 0xB7, 0xF4, 0xDD, 0xE4, 0x91, 0x42, 0x11, 0x37, 0xFE, 0x04, 0xC6, 0xE2, 0xAF, 0xA1, 0xF5, 0xFF, 0x35, 0x8D, 0xF5, 0x62, 0x6B, 0xE5, 0xB5, 0x3E, 0x8F, 0x99, 0x3D],
    [0x95, 0x79, 0x70, 0x5F, 0xD4, 0x00, 0xB0, 0xF2, 0xB2, 0x6B, 0x77, 0x0F, 0x36, 0x07, 0xA6, 0x5B, 0x5C, 0x30, 0xD1, 0xF2, 0xB1, 0x3C, 0xC8, 0xE9, 0x98, 0xB6, 0xD2, 0xC2, 0x48, 0x54, 0x40, 0x21, 0x5F, 0x2E, 0x3A, 0x9A, 0xD4, 0x98, 0x2F, 0x4A, 0xE3, 0x6A, 0x39, 0x0D, 0xC7, 0x69, 0xD3, 0xBA],
    [0x95, 0x79, 0x7E, 0xDA, 0xD1, 0xB9, 0xA4, 0x00, 0x15, 0x95, 0xFE, 0x88, 0x6B, 0x88, 0x64, 0x97, 0xF3, 0xF5, 0x83, 0xFD, 0xEA, 0x41, 0x66, 0xA0, 0xC4, 0x09, 0x5B, 0xE5, 0xAB, 0x84, 0x5F, 0x0D, 0x12, 0x2B, 0xD7, 0x28, 0xA3, 0x17, 0x5A, 0xBE, 0x0B, 0x18, 0x5C, 0xB7, 0xCD, 0x34, 0xEA, 0x25],
    [0x95, 0x7C, 0xE9, 0x53, 0xCE, 0x70, 0x05, 0x4E, 0xF6, 0x1F, 0x67, 0xFA, 0xEF, 0x51, 0x81, 0x74, 0x0C, 0xCE, 0xC7, 0x3F, 0xC5, 0x11, 0x41, 0x22, 0x74, 0x8C, 0x4E, 0x63, 0x54, 0x75, 0x6F, 0xD9, 0x94, 0xFE, 0x13, 0xBD, 0x88, 0xC0, 0xEB, 0x5D, 0x59, 0x31, 0x7F, 0xC1, 0xE0, 0xFD, 0xF1, 0x92],
    [0x95, 0x7B, 0x44, 0xA3, 0x5A, 0x9E, 0x65, 0x1B, 0x62, 0x64, 0xB3, 0xA1, 0xE2, 0x2A, 0x20, 0x2C, 0xDA, 0x1F, 0x0A, 0xA1, 0x5D, 0x99, 0x40, 0x58, 0x43, 0x7B, 0x19, 0xA3, 0x7C, 0xEF, 0x6E, 0xA5, 0x47, 0x1D, 0x1D, 0x9B, 0xD8, 0x62, 0x3E, 0x04, 0x5B, 0x6E, 0x9D, 0xD7, 0x28, 0xF1, 0x62, 0xAD],
    [0x95, 0x7B, 0x4F, 0x13, 0x17, 0x20, 0x70, 0xAA, 0xB0, 0xE1, 0x1D, 0x8B, 0xF0, 0xC8, 0x35, 0x8F, 0xD9, 0x60, 0xB4, 0xBD, 0x7A, 0xC8, 0x81, 0x48, 0x15, 0x8C, 0xF4, 0x97, 0x72, 0x76, 0xF3, 0x01, 0xBC, 0x61, 0x1D, 0xF4, 0xDA, 0x41, 0x6D, 0x26, 0x9B, 0x79, 0x96, 0x09, 0xDA, 0xF2, 0x0C, 0xF6],
    [0x95, 0x7B, 0x5C, 0x7B, 0x2D, 0x3B, 0x1B, 0x64, 0xB0, 0xE1, 0x3E, 0x56, 0x96, 0x7F, 0xD3, 0x71, 0xB9, 0xB5, 0xC3, 0xF8, 0x77, 0xE7, 0x11, 0xF4, 0x5C, 0xA3, 0xA5, 0x9A, 0x9D, 0x6D, 0xB3, 0x96, 0x11, 0x8B, 0xDF, 0x34, 0x09, 0x2D, 0x11, 0x3B, 0xF9, 0x64, 0x31, 0xA7, 0x66, 0xEA, 0x2C, 0xDE],
    [0x95, 0x7B, 0x5F, 0x6C, 0x26, 0xF9, 0x29, 0x31, 0x89, 0xB2, 0xCB, 0x33, 0x57, 0xD9, 0x32, 0x88, 0x9D, 0xC0, 0x23, 0xE3, 0x36, 0xA5, 0x34, 0x0C, 0x48, 0xC4, 0xD6, 0x79, 0x69, 0x57, 0x26, 0x70, 0x9D, 0x9C, 0x64, 0x0B, 0xC3, 0x0B, 0x1D, 0x71, 0x46, 0xE4, 0xE8, 0x12, 0x1F, 0xA2, 0x36, 0xE5],
    [0x95, 0x7B, 0x6C, 0x3B, 0x53, 0x8B, 0xF0, 0x85, 0x22, 0x07, 0x23, 0x27, 0xF1, 0x71, 0xE1, 0x3C, 0xBC, 0x47, 0xE3, 0x95, 0x5C, 0x73, 0x31, 0xDA, 0x43, 0x87, 0xEF, 0x71, 0x5D, 0x7E, 0x97, 0x76, 0x8A, 0x41, 0x7E, 0x76, 0x31, 0xF0, 0xC9, 0x67, 0x2A, 0xCD, 0xC2, 0x7C, 0x88, 0x2C, 0xBC, 0x11],
    [0x95, 0x7B, 0x74, 0x5C, 0x1A, 0x4C, 0x57, 0x98, 0x94, 0x81, 0xA1, 0xB5, 0x90, 0x2A, 0xC9, 0x01, 0x75, 0xCC, 0xE7, 0x79, 0x55, 0xA9, 0x9F, 0x5B, 0x53, 0x00, 0x96, 0x93, 0xB7, 0x47, 0xE1, 0xC0, 0x04, 0x09, 0xDC, 0xEF, 0x8B, 0x6D, 0x32, 0xFF, 0xA5, 0x0B, 0x35, 0x41, 0x8F, 0xD0, 0xE9, 0x89],
    [0x95, 0x7B, 0x7B, 0x07, 0x56, 0x2B, 0x10, 0x35, 0x73, 0xCE, 0x97, 0x74, 0x7D, 0xB2, 0xD7, 0x67, 0x3A, 0x04, 0x00, 0x84, 0xE2, 0xA6, 0x7B, 0x19, 0xB7, 0x71, 0x2B, 0xF1, 0xD5, 0xDB, 0xDC, 0xE1, 0x9B, 0xE6, 0xEB, 0xFB, 0xDB, 0x6E, 0xCC, 0x17, 0x36, 0x62, 0x55, 0x26, 0x1A, 0x27, 0x49, 0x60],
    [0x95, 0x7B, 0x87, 0xF8, 0xE4, 0x11, 0x4D, 0x09, 0xDB, 0x5A, 0x31, 0x20, 0x56, 0x83, 0x1F, 0x6B, 0xA9, 0xA0, 0x82, 0xEC, 0x16, 0x4E, 0x04, 0x46, 0x6D, 0xC6, 0x1C, 0x7B, 0x5A, 0xDC, 0xBB, 0xFC, 0xCA, 0x2D, 0x89, 0x6B, 0x96, 0x70, 0xEB, 0xA2, 0x92, 0x6B, 0xA2, 0x29, 0xEB, 0xCA, 0x42, 0x3E],
    [0x95, 0x7B, 0x92, 0x64, 0x58, 0xCB, 0x87, 0x1B, 0xA8, 0x82, 0x2D, 0x39, 0x8F, 0xC8, 0x25, 0xD8, 0x96, 0x4B, 0x25, 0xCA, 0xA7, 0x13, 0xFE, 0x19, 0x02, 0xEF, 0xB8, 0xDF, 0x19, 0x2D, 0xCD, 0xE3, 0xF6, 0xCE, 0x74, 0x78, 0x67, 0x27, 0x3D, 0xF8, 0x4A, 0xFB, 0x60, 0xBB, 0x95, 0x03, 0xB6, 0x16],
    [0x95, 0x7F, 0x01, 0xD5, 0x03, 0x64, 0x70, 0x14, 0xC3, 0xB7, 0x9B, 0x0A, 0x3E, 0xCB, 0x49, 0x18, 0xF3, 0x84, 0x32, 0x87, 0xE0, 0xBB, 0xFE, 0xDC, 0x3A, 0x41, 0x91, 0x84, 0x04, 0xC8, 0x35, 0xEA, 0xC9, 0x47, 0xB4, 0x76, 0x2F, 0xBA, 0x05, 0x21, 0x80, 0xC3, 0xC2, 0x00, 0x6C, 0x1B, 0x15, 0x03],
    [0x95, 0x7D, 0x5A, 0x0F, 0xBB, 0x34, 0x83, 0x05, 0x81, 0xD4, 0xC7, 0xCA, 0x1C, 0x83, 0xAF, 0xCB, 0xB2, 0xB0, 0x35, 0x21, 0x80, 0x18, 0x65, 0x72, 0x06, 0x87, 0x51, 0x72, 0xAC, 0xF3, 0x89, 0xC5, 0xA2, 0xC6, 0x84, 0xAF, 0x4D, 0x46, 0x96, 0xAE, 0x23, 0x0A, 0xCA, 0x43, 0x6C, 0x59, 0x0D, 0x45],
    [0x95, 0x7D, 0x68, 0x1A, 0x52, 0xD2, 0xF6, 0x9C, 0x2E, 0xFD, 0x07, 0x1E, 0x6A, 0xCE, 0xAC, 0x36, 0x6E, 0x72, 0x3A, 0xFA, 0xC5, 0x22, 0x36, 0xC3, 0xA8, 0xA8, 0x6D, 0x42, 0x22, 0x00, 0x18, 0x04, 0x40, 0xE7, 0xEA, 0x7E, 0xDE, 0x71, 0xB9, 0x5D, 0x01, 0xD2, 0x83, 0x0C, 0xB7, 0x0F, 0xC0, 0x21],
    [0x95, 0x7D, 0x6D, 0x07, 0x33, 0x88, 0x37, 0x07, 0x73, 0xF4, 0xFD, 0x7D, 0xAC, 0x5A, 0xA6, 0xD6, 0xC9, 0x8E, 0x7F, 0x69, 0x40, 0x5F, 0x8F, 0x14, 0x52, 0x76, 0x7F, 0xA2, 0xC8, 0x17, 0x9B, 0x0B, 0x23, 0x6B, 0xB2, 0x63, 0xCA, 0x76, 0x23, 0xEF, 0xC7, 0x70, 0x9B, 0xCF, 0xEE, 0x27, 0xA2, 0x1E],
    [0x95, 0x7D, 0x79, 0x1A, 0x6D, 0xB9, 0xBD, 0x07, 0xB9, 0x9E, 0x3E, 0x6B, 0xD5, 0xF0, 0x9B, 0x2F, 0x8E, 0xE5, 0x27, 0xDB, 0x92, 0xFE, 0x83, 0x49, 0x15, 0xBE, 0x1D, 0x5E, 0xA4, 0x57, 0xDA, 0xE5, 0x5E, 0xC9, 0x64, 0x41, 0x6A, 0x17, 0x42, 0x83, 0x5B, 0x5A, 0x78, 0x56, 0xE2, 0xE1, 0x6D, 0x5D],
    [0x95, 0x7D, 0x80, 0x31, 0x73, 0x85, 0x76, 0x17, 0x18, 0x10, 0xA0, 0xAC, 0x00, 0x28, 0x79, 0x42, 0xE5, 0x5B, 0x18, 0x2B, 0xD2, 0x75, 0x9F, 0xD0, 0x86, 0x48, 0x95, 0xA1, 0x21, 0xB3, 0x9A, 0xE0, 0x8D, 0xB6, 0x85, 0x6B, 0xC1, 0xF4, 0x2C, 0x88, 0x73, 0x6D, 0xE1, 0xEE, 0xFF, 0x9D, 0xD0, 0x28],
    [0x95, 0x7D, 0x8D, 0x30, 0x56, 0xFB, 0x29, 0x0F, 0x45, 0x2F, 0xC3, 0xF6, 0x2B, 0x3A, 0xAF, 0xFD, 0xAB, 0x48, 0x35, 0xC5, 0xDE, 0x3A, 0x7B, 0xDD, 0x01, 0x30, 0x2F, 0x9F, 0xEB, 0xD2, 0x36, 0xDC, 0xFD, 0x1E, 0x6B, 0xA6, 0xF1, 0xF4, 0xEC, 0xF8, 0x82, 0x32, 0xFA, 0x14, 0x17, 0x8A, 0x81, 0xCD],
    [0x95, 0x7D, 0x90, 0x5B, 0xDB, 0x26, 0xCB, 0x87, 0xD9, 0x80, 0x39, 0x03, 0xBF, 0x49, 0x39, 0x30, 0xCA, 0x21, 0x42, 0xCE, 0xC6, 0xEB, 0xED, 0x9D, 0x22, 0x5D, 0xD4, 0xF4, 0x6D, 0x90, 0x63, 0x18, 0xB4, 0xE8, 0x45, 0xDD, 0xA7, 0xA9, 0x2E, 0x62, 0xF2, 0xD4, 0xB1, 0x59, 0xD4, 0xCD, 0x9B, 0x66],
    [0x95, 0x7D, 0x9D, 0x0E, 0x22, 0x5F, 0x2B, 0x3B, 0xFE, 0xDC, 0x80, 0xDD, 0xBF, 0x09, 0x73, 0x7F, 0xED, 0x21, 0xDC, 0x4D, 0x94, 0xD3, 0x4C, 0x40, 0xCE, 0xC1, 0x0E, 0x2F, 0x54, 0x02, 0xA5, 0x42, 0xBA, 0xB7, 0x98, 0xEC, 0x89, 0x79, 0xD8, 0xEE, 0x97, 0x0D, 0x9F, 0x51, 0xB5, 0x0D, 0xFE, 0xAA],
    [0x95, 0x7D, 0xA7, 0xF8, 0xC6, 0xB6, 0xAE, 0x33, 0x22, 0x25, 0x93, 0x1D, 0x85, 0x6D, 0x59, 0xB4, 0xF7, 0x6B, 0xF5, 0x8E, 0x51, 0x33, 0x7A, 0x10, 0x19, 0xCC, 0xB4, 0x86, 0x91, 0x30, 0x90, 0x96, 0x30, 0xC1, 0x7A, 0xD1, 0x04, 0x19, 0x5B, 0x3C, 0xED, 0x37, 0xC6, 0xF2, 0xA4, 0x82, 0xB0, 0x32],
    [0x95, 0x81, 0x0F, 0x01, 0xD9, 0x42, 0x31, 0xA0, 0xD1, 0xCA, 0x47, 0xB6, 0x54, 0x73, 0x7A, 0x5C, 0x12, 0x9E, 0x05, 0x70, 0xA4, 0x3C, 0x10, 0x2C, 0xFE, 0x6F, 0x4F, 0x14, 0x08, 0x01, 0x6E, 0x1A, 0x67, 0xEB, 0xD4, 0x44, 0x16, 0x86, 0x06, 0x5B, 0x4F, 0x5A, 0x5F, 0xF8, 0x1D, 0xC5, 0x0D, 0x15],
    [0x95, 0x7F, 0x71, 0x5D, 0x5A, 0x80, 0x47, 0x4F, 0x48, 0xC9, 0x3C, 0x7C, 0x96, 0x33, 0x25, 0x18, 0xFD, 0x66, 0x33, 0x3B, 0x88, 0x11, 0xD9, 0x62, 0x60, 0xDC, 0xFF, 0xA8, 0xD3, 0xEA, 0xD9, 0x96, 0xDC, 0x07, 0xAA, 0x37, 0x83, 0xD0, 0xD6, 0x9E, 0x6A, 0x1E, 0x2F, 0x76, 0xAB, 0x56, 0x4E, 0x5D],
    [0x95, 0x7F, 0x78, 0x77, 0xD6, 0x6F, 0x92, 0x7F, 0x27, 0x5E, 0xD9, 0x0D, 0x10, 0x92, 0xEC, 0xE2, 0xF4, 0x51, 0xE0, 0xFE, 0xA7, 0x82, 0x56, 0x30, 0xEF, 0x6A, 0x70, 0x1C, 0x77, 0xCF, 0x00, 0xD6, 0x4B, 0xC0, 0x52, 0x98, 0x76, 0xCF, 0x2F, 0x24, 0xFC, 0xE8, 0x19, 0xA5, 0xC1, 0x9C, 0xE3, 0xC4],
    [0x95, 0x7F, 0x82, 0xD6, 0x2B, 0xA1, 0xC1, 0xB1, 0x44, 0xFB, 0x91, 0x3A, 0x08, 0x22, 0xB8, 0xA5, 0x50, 0x6C, 0x8F, 0xBC, 0xDA, 0xD7, 0x2F, 0x08, 0xE0, 0x6C, 0x64, 0x2D, 0x62, 0xB8, 0xE9, 0x64, 0xE5, 0xD4, 0xA2, 0x97, 0xAC, 0x19, 0xF9, 0x3A, 0x4A, 0xAA, 0x0E, 0xFD, 0xE9, 0xAD, 0x1C, 0x10],
    [0x95, 0x7F, 0x88, 0x8A, 0xD9, 0x02, 0x17, 0x03, 0x4D, 0x82, 0x4E, 0xF1, 0xB3, 0x15, 0x97, 0xB2, 0x2D, 0xA5, 0xC9, 0x16, 0x8D, 0x6A, 0x84, 0x03, 0x1B, 0xB8, 0x45, 0x3F, 0xAF, 0x68, 0xC4, 0x7C, 0x9B, 0x61, 0x39, 0x6B, 0x17, 0x9B, 0xD9, 0xA1, 0xB4, 0x24, 0xB3, 0x6C, 0x40, 0xD6, 0xCE, 0xD2],
    [0x95, 0x7F, 0x90, 0x81, 0x23, 0x3F, 0x67, 0x0E, 0x75, 0x0D, 0xA6, 0xA5, 0x2E, 0x67, 0x77, 0x68, 0xBB, 0x7B, 0xEC, 0x29, 0x65, 0x95, 0x2F, 0x2A, 0xC7, 0x7B, 0xB6, 0x99, 0x90, 0xA6, 0xBF, 0xC5, 0x04, 0xF9, 0x9B, 0x53, 0xB7, 0x13, 0x02, 0x2B, 0xE2, 0x39, 0xE7, 0xCF, 0xB6, 0xEB, 0xBC, 0x99],
    [0x95, 0x7F, 0x9B, 0xF2, 0xBF, 0xA1, 0x49, 0x97, 0x1C, 0x38, 0xA1, 0x9C, 0x30, 0x0D, 0xC1, 0x83, 0x48, 0xC2, 0x5F, 0x37, 0xBA, 0xF9, 0xED, 0x41, 0x42, 0xD1, 0x76, 0x19, 0xCB, 0xBF, 0x10, 0x7A, 0x6C, 0x9B, 0xF3, 0x3D, 0xB6, 0x50, 0xB9, 0x9E, 0x79, 0x34, 0x0C, 0xEC, 0xE5, 0xE3, 0x34, 0x62],
    [0x95, 0x7F, 0xA8, 0xB2, 0x6F, 0x63, 0xB8, 0x50, 0x88, 0x78, 0x55, 0xF6, 0xF3, 0xD7, 0x16, 0xA5, 0xD4, 0x75, 0x78, 0xB0, 0x4A, 0x85, 0x00, 0xB2, 0x6D, 0x1D, 0x87, 0x11, 0xE6, 0x45, 0xB9, 0xBD, 0xF7, 0x2B, 0xD4, 0x5E, 0x2E, 0x6C, 0x51, 0x4B, 0xA0, 0xF8, 0x8B, 0x22, 0x52, 0x52, 0xB4, 0x05],
    [0x95, 0x7F, 0xAA, 0xBA, 0xDE, 0x3F, 0x91, 0x59, 0xFA, 0x2B, 0x17, 0xCB, 0x94, 0x70, 0xE4, 0xBE, 0xAD, 0x8C, 0xE5, 0xE8, 0x8C, 0x3B, 0x63, 0x9C, 0x7E, 0x86, 0x17, 0xDA, 0x81, 0x40, 0xB8, 0x63, 0x4E, 0x1A, 0xA2, 0xE4, 0xDC, 0x32, 0x5D, 0x13, 0x14, 0x07, 0x44, 0xB8, 0x9F, 0xC6, 0xD3, 0xA0],
    [0x95, 0x7F, 0xB2, 0xF3, 0x59, 0x75, 0xF4, 0x3A, 0xF8, 0xCD, 0xC9, 0xCB, 0x85, 0x3D, 0xEF, 0x7C, 0x8F, 0x7F, 0x62, 0x64, 0x19, 0xBB, 0x5A, 0xE5, 0xEC, 0xF3, 0x20, 0xA3, 0xB2, 0xC0, 0xC3, 0x5F, 0x78, 0x15, 0x0C, 0x84, 0x08, 0x50, 0x91, 0x85, 0x98, 0x74, 0x94, 0x19, 0x10, 0x09, 0x03, 0x68],
    [0x95, 0x83, 0x23, 0xC2, 0x76, 0x16, 0xC6, 0x32, 0x14, 0x57, 0xA1, 0x14, 0x53, 0x81, 0xA3, 0x5C, 0x1F, 0xC7, 0xD1, 0x1C, 0xDB, 0xC7, 0xFA, 0xD0, 0x0B, 0x92, 0x91, 0x40, 0xCA, 0xA9, 0xBF, 0x9A, 0x3D, 0x02, 0xE6, 0xA4, 0x75, 0x61, 0xCB, 0xA3, 0xD9, 0x9E, 0x7E, 0x1F, 0x78, 0x89, 0x51, 0xB5],
    [0x95, 0x81, 0x84, 0xAF, 0x90, 0xEC, 0x9E, 0x53, 0x6E, 0xD5, 0xA7, 0x60, 0xF0, 0x03, 0xCC, 0xE6, 0x61, 0x6F, 0x7E, 0xED, 0x9E, 0x3F, 0x9C, 0x29, 0xC3, 0x0E, 0x98, 0xCA, 0x29, 0xE6, 0x08, 0x93, 0xEF, 0x57, 0xCE, 0x2F, 0xF0, 0xC9, 0x95, 0xFB, 0x94, 0x56, 0x6A, 0xC7, 0x71, 0x2D, 0xCF, 0x79],
    [0x95, 0x81, 0x8C, 0x8C, 0x69, 0xEA, 0x6C, 0x8B, 0x54, 0xE2, 0xDC, 0xA3, 0xC9, 0x96, 0xB5, 0x56, 0xF3, 0xED, 0xC3, 0x00, 0x69, 0x43, 0x6D, 0xF2, 0x49, 0x09, 0x6F, 0xBF, 0x13, 0xE2, 0x71, 0x23, 0xAD, 0xB7, 0x7D, 0x39, 0x65, 0x44, 0x51, 0x83, 0xAA, 0xDA, 0xD2, 0x7A, 0x29, 0x25, 0x3E, 0xE7],
    [0x95, 0x81, 0x92, 0xF8, 0x69, 0x66, 0xE8, 0x73, 0xE2, 0xB4, 0x29, 0xEF, 0x7A, 0xA1, 0x33, 0x70, 0x75, 0x71, 0x96, 0xBF, 0xBB, 0x6A, 0xED, 0xFF, 0x1D, 0x11, 0x24, 0x26, 0x49, 0x47, 0x7A, 0x04, 0x07, 0xBE, 0x47, 0x32, 0x57, 0xB9, 0xDE, 0xBE, 0x80, 0x8B, 0xC0, 0xB5, 0x24, 0x63, 0xBA, 0x8F],
    [0x95, 0x81, 0x99, 0x07, 0x4D, 0x30, 0x9A, 0xB2, 0x13, 0x66, 0x7C, 0xB6, 0x3C, 0x7C, 0x50, 0xD3, 0x38, 0x5E, 0x55, 0x36, 0xBA, 0xA1, 0x3F, 0xE1, 0xAA, 0xAC, 0xED, 0xAB, 0x0C, 0x93, 0x89, 0x34, 0xFC, 0x6E, 0x44, 0xBA, 0xD0, 0x5C, 0x17, 0x32, 0x8D, 0xE4, 0x5F, 0x87, 0x92, 0xAA, 0x63, 0x92],
    [0x95, 0x81, 0xA4, 0xE2, 0x84, 0x71, 0xA4, 0xD2, 0x6C, 0x39, 0x2B, 0x2A, 0x03, 0x19, 0xE0, 0x9A, 0x41, 0x27, 0x08, 0xED, 0xC2, 0x93, 0x7B, 0x49, 0x51, 0x27, 0x4A, 0x3A, 0xF5, 0x54, 0x6E, 0x35, 0x97, 0x83, 0x6B, 0x71, 0xE2, 0xAF, 0x51, 0x24, 0xEC, 0xE5, 0x46, 0x23, 0xFA, 0x82, 0x38, 0x1D],
    [0x95, 0x81, 0xAB, 0x66, 0x9D, 0xDE, 0x3B, 0xDE, 0xDE, 0x43, 0xCE, 0x68, 0x14, 0xD1, 0xEE, 0x3B, 0x54, 0x9A, 0x48, 0x6B, 0x01, 0xD5, 0x96, 0xD8, 0xC2, 0x09, 0xF7, 0x8F, 0x87, 0xBE, 0x0A, 0x3F, 0x6A, 0x66, 0x8E, 0x62, 0xE1, 0x5A, 0x8F, 0x31, 0xCE, 0xD9, 0xBF, 0x86, 0xA3, 0x61, 0x37, 0x5D],
];

pub fn call_set_emission_address(env: &mut crate::consensus::consensus_apply::ApplyEnv, args: Vec<Vec<u8>>) {
    if args.len() != 1 { panic_any("invalid_args") }
    let address = args[0].as_slice();
    if address.len() != 48 { panic_any("invalid_address_pk") }
    kv_put(env, &bcat(&[b"bic:epoch:emission_address:", env.caller_env.account_caller.as_slice()]), address);
}

pub fn call_submit_sol(env: &mut crate::consensus::consensus_apply::ApplyEnv, args: Vec<Vec<u8>>) {
    if args.len() != 1 { panic_any("invalid_args") }
    let sol = args[0].as_slice();
    if sol.len() != consensus::bic::sol::SOL_SIZE { panic_any("invalid_sol_seed_size") }
    let sol: [u8; consensus::bic::sol::SOL_SIZE] = sol.try_into().unwrap();

    let hash = blake3::hash(&sol);
    let mut flips = 0;
    for seg in consensus::bic::sol_bloom::segs_from_digest(hash.as_bytes()) {
        let key = format!("bic:epoch:solbloom:{}", seg.page).into_bytes();
        if kv_set_bit(env, &key, seg.bit_offset) { flips += 1 }
    }
    if flips == 0 { panic_any("sol_exists") }

    let usol = consensus::bic::sol::unpack(&sol);
    if env.caller_env.entry_epoch != usol.epoch { panic_any("invalid_epoch") }

    let segment_vr_hash = kv_get(env, b"bic:epoch:segment_vr_hash").unwrap();
    let diff_bits = kv_get(env, b"bic:epoch:diff_bits").unwrap();
    let diff_bits_int = std::str::from_utf8(&diff_bits).ok().and_then(|s| s.parse::<u64>().ok()).unwrap_or_else(|| panic_any("invalid_diff_bits"));
    if !consensus::bic::sol::verify(&sol, hash.as_bytes(), &segment_vr_hash, &env.caller_env.entry_vr_b3, diff_bits_int).unwrap_or(false) {
        panic_any("invalid_sol");
    }

    if !kv_exists(env, &bcat(&[b"bic:epoch:pop:", usol.pk.as_slice()])) {
        match consensus::bls12_381::verify(&usol.pk, &usol.pop, &usol.pk, consensus::aggsig::DST_POP) {
            Ok(()) => kv_put(env, &bcat(&[b"bic:epoch:pop:", usol.pk.as_slice()]), &usol.pop),
            Err(_) => panic_any("invalid_pop")
        }
    }
    kv_increment(env, &bcat(&[b"bic:epoch:solutions_count:", usol.pk.as_slice()]), 1);
}

pub fn kv_get_trainers(env: &crate::consensus::consensus_apply::ApplyEnv, key: &[u8]) -> Vec<Vec<u8>> {
    match kv_get(env, key) {
        None => Vec::new(),
        Some(trainer_list) => {
            let cursor = std::io::Cursor::new(trainer_list.as_slice());
            let term_trainer_list = eetf::Term::decode(cursor).unwrap();
            match term_trainer_list {
                eetf::Term::List(term_permission_list) => {
                    let mut out = Vec::with_capacity(term_permission_list.elements.len());
                    for el in term_permission_list.elements {
                        if let eetf::Term::Binary(b) = el {
                            out.push(b.bytes); // move, no clone
                        } else {
                            panic_any("invalid_trainer_list_term");
                        }
                    }
                    out
                },
                _ => panic_any("invalid_trainer_list_term")
            }
        }
    }
}

pub fn call_slash_trainer(env: &mut crate::consensus::consensus_apply::ApplyEnv, args: Vec<Vec<u8>>) {
    if args.len() != 5 { panic_any("invalid_args") }
    let epoch = args[0].as_slice();
    let epoch = std::str::from_utf8(&epoch).ok().and_then(|s| s.parse::<u64>().ok()).unwrap_or_else(|| panic_any("invalid_epoch"));
    let malicious_pk = args[1].as_slice();
    let signature = args[2].as_slice();
    let mask_size = args[3].as_slice();
    let mask_size = std::str::from_utf8(&mask_size).ok().and_then(|s| s.parse::<u64>().ok()).unwrap_or_else(|| panic_any("invalid_mask_size"));
    let mask = args[4].to_vec();

    if epoch != env.caller_env.entry_epoch { panic_any("invalid_epoch") }

    let mut trainers = kv_get_trainers(env, &bcat(&[b"bic:epoch:trainers:", epoch.to_string().as_bytes()]));
    if !trainers.iter().any(|v| v.as_slice() == malicious_pk) { panic_any("invalid_trainer_pk") }

    let signers = consensus::aggsig::unmask_trainers(&trainers, &mask, mask_size as usize);
    let consensus_pct = signers.len() as f64 / trainers.len() as f64;
    if consensus_pct < 0.67 { panic_any("invalid_amount_of_signatures") }

    let apk = consensus::bls12_381::aggregate_public_keys(signers).unwrap_or_else(|_| panic_any("invalid_aggregation"));
    let msg = bcat(&[b"slash_trainer", (epoch as u32).to_le_bytes().as_slice(), malicious_pk]);
    let signature_valid = match consensus::bls12_381::verify(&apk, signature, msg.as_slice(), DST_MOTION) {
        Ok(()) => true,
        _ => false
    };
    if !signature_valid { panic_any("invalid_signature") }

    let mut trainers_removed = kv_get_trainers(env, &bcat(&[b"bic:epoch:trainers:removed:", epoch.to_string().as_bytes()]));
    trainers_removed.push(malicious_pk.to_vec());
    let term_trainers_removed = consensus::bic::eetf_list_of_binaries(trainers_removed).unwrap();
    kv_put(env, &bcat(&[b"bic:epoch:trainers:removed:", epoch.to_string().as_bytes()]), term_trainers_removed.as_slice());

    trainers.retain(|pk| pk.as_slice() != malicious_pk);
    let term_trainers = consensus::bic::eetf_list_of_binaries(trainers).unwrap();
    kv_put(env, &bcat(&[b"bic:epoch:trainers:", epoch.to_string().as_bytes()]), term_trainers.as_slice());

    let height = format!("{:012}", env.caller_env.entry_height.saturating_add(1)).into_bytes();
    kv_put(env, &bcat(&[b"bic:epoch:trainers:height:", &height]), term_trainers.as_slice());
}

pub fn next(env: &mut crate::consensus::consensus_apply::ApplyEnv) {
    //Currently handled on elixir side
}
